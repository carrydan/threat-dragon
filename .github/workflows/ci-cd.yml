name: CI/CD Pipeline

on:
  push:
    branches: [ my-diplom, main ]
  pull_request:
    branches: [ my-diplom, main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      # Шаг 1: Клонирование кода из репозитория
      - uses: actions/checkout@v2

      # Шаг 2: Установка версии Node.js
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      # Шаг 3: Установка зависимостей для фронтенда
      - name: Install dependencies
        run: npm install
        working-directory: td.vue

      # Шаг 4: Запуск тестов фронтенда
      - name: Run tests
        run: npm test
        working-directory: td.vue

      # Шаг 5: Сборка фронтенда
      - name: Build application
        run: npm run build
        working-directory: td.vue

      # Шаг 6: Логин в Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Шаг 7: Сборка Docker-образа
      - name: Build Docker image
        run: docker build -t carrydan/threat-dragon:${{ github.sha }} .

      # Шаг 8: Публикация Docker-образа
      - name: Push Docker image
        run: docker push carrydan/threat-dragon:${{ github.sha }}

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Шаг 1: Клонирование кода из репозитория
      - uses: actions/checkout@v2

      # Шаг 2: Логин в Docker Hub (снова, если потребуется для деплоя)
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Шаг 3: Деплой Docker-образа
      - name: Deploy application
        run: |
          # Здесь выполните команды для деплоя приложения
          # Например, если вы используете Kubernetes, можно выполнить:
          # kubectl set image deployment/threat-dragon threat-dragon=your_dockerhub_username/threat-dragon:${{ github.sha }}
          echo "Deploying application"
